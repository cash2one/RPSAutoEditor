# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: wxrpcauth.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='wxrpcauth.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0fwxrpcauth.proto\"\x1b\n\x0b\x41uthRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\"\x1c\n\tAuthReply\x12\x0f\n\x07message\x18\x01 \x01(\t\"\x1d\n\nByteReplay\x12\x0f\n\x07message\x18\x01 \x01(\x0c\x32\xf7\x02\n\x06wxAuth\x12\x30\n\x12\x63heckClientVersion\x12\x0c.AuthRequest\x1a\n.AuthReply\"\x00\x12\x31\n\x13\x63heckClient2Version\x12\x0c.AuthRequest\x1a\n.AuthReply\"\x00\x12\x30\n\x12\x63heckServerVersion\x12\x0c.AuthRequest\x1a\n.AuthReply\"\x00\x12\'\n\twxRPCAuth\x12\x0c.AuthRequest\x1a\n.AuthReply\"\x00\x12*\n\x0bgetWxBotKey\x12\x0c.AuthRequest\x1a\x0b.ByteReplay\"\x00\x12(\n\ncheckWxBot\x12\x0c.AuthRequest\x1a\n.AuthReply\"\x00\x12,\n\x0e\x43\x61llAutoEditor\x12\x0c.AuthRequest\x1a\n.AuthReply\"\x00\x12)\n\x0brunAEScript\x12\x0c.AuthRequest\x1a\n.AuthReply\"\x00\x62\x06proto3')
)




_AUTHREQUEST = _descriptor.Descriptor(
  name='AuthRequest',
  full_name='AuthRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='AuthRequest.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=19,
  serialized_end=46,
)


_AUTHREPLY = _descriptor.Descriptor(
  name='AuthReply',
  full_name='AuthReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='AuthReply.message', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=48,
  serialized_end=76,
)


_BYTEREPLAY = _descriptor.Descriptor(
  name='ByteReplay',
  full_name='ByteReplay',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='message', full_name='ByteReplay.message', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=78,
  serialized_end=107,
)

DESCRIPTOR.message_types_by_name['AuthRequest'] = _AUTHREQUEST
DESCRIPTOR.message_types_by_name['AuthReply'] = _AUTHREPLY
DESCRIPTOR.message_types_by_name['ByteReplay'] = _BYTEREPLAY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

AuthRequest = _reflection.GeneratedProtocolMessageType('AuthRequest', (_message.Message,), dict(
  DESCRIPTOR = _AUTHREQUEST,
  __module__ = 'wxrpcauth_pb2'
  # @@protoc_insertion_point(class_scope:AuthRequest)
  ))
_sym_db.RegisterMessage(AuthRequest)

AuthReply = _reflection.GeneratedProtocolMessageType('AuthReply', (_message.Message,), dict(
  DESCRIPTOR = _AUTHREPLY,
  __module__ = 'wxrpcauth_pb2'
  # @@protoc_insertion_point(class_scope:AuthReply)
  ))
_sym_db.RegisterMessage(AuthReply)

ByteReplay = _reflection.GeneratedProtocolMessageType('ByteReplay', (_message.Message,), dict(
  DESCRIPTOR = _BYTEREPLAY,
  __module__ = 'wxrpcauth_pb2'
  # @@protoc_insertion_point(class_scope:ByteReplay)
  ))
_sym_db.RegisterMessage(ByteReplay)



_WXAUTH = _descriptor.ServiceDescriptor(
  name='wxAuth',
  full_name='wxAuth',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=110,
  serialized_end=485,
  methods=[
  _descriptor.MethodDescriptor(
    name='checkClientVersion',
    full_name='wxAuth.checkClientVersion',
    index=0,
    containing_service=None,
    input_type=_AUTHREQUEST,
    output_type=_AUTHREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='checkClient2Version',
    full_name='wxAuth.checkClient2Version',
    index=1,
    containing_service=None,
    input_type=_AUTHREQUEST,
    output_type=_AUTHREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='checkServerVersion',
    full_name='wxAuth.checkServerVersion',
    index=2,
    containing_service=None,
    input_type=_AUTHREQUEST,
    output_type=_AUTHREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='wxRPCAuth',
    full_name='wxAuth.wxRPCAuth',
    index=3,
    containing_service=None,
    input_type=_AUTHREQUEST,
    output_type=_AUTHREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='getWxBotKey',
    full_name='wxAuth.getWxBotKey',
    index=4,
    containing_service=None,
    input_type=_AUTHREQUEST,
    output_type=_BYTEREPLAY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='checkWxBot',
    full_name='wxAuth.checkWxBot',
    index=5,
    containing_service=None,
    input_type=_AUTHREQUEST,
    output_type=_AUTHREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='CallAutoEditor',
    full_name='wxAuth.CallAutoEditor',
    index=6,
    containing_service=None,
    input_type=_AUTHREQUEST,
    output_type=_AUTHREPLY,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='runAEScript',
    full_name='wxAuth.runAEScript',
    index=7,
    containing_service=None,
    input_type=_AUTHREQUEST,
    output_type=_AUTHREPLY,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_WXAUTH)

DESCRIPTOR.services_by_name['wxAuth'] = _WXAUTH

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class wxAuthStub(object):
    """The wxAuth service definition.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.checkClientVersion = channel.unary_unary(
          '/wxAuth/checkClientVersion',
          request_serializer=AuthRequest.SerializeToString,
          response_deserializer=AuthReply.FromString,
          )
      self.checkClient2Version = channel.unary_unary(
          '/wxAuth/checkClient2Version',
          request_serializer=AuthRequest.SerializeToString,
          response_deserializer=AuthReply.FromString,
          )
      self.checkServerVersion = channel.unary_unary(
          '/wxAuth/checkServerVersion',
          request_serializer=AuthRequest.SerializeToString,
          response_deserializer=AuthReply.FromString,
          )
      self.wxRPCAuth = channel.unary_unary(
          '/wxAuth/wxRPCAuth',
          request_serializer=AuthRequest.SerializeToString,
          response_deserializer=AuthReply.FromString,
          )
      self.getWxBotKey = channel.unary_unary(
          '/wxAuth/getWxBotKey',
          request_serializer=AuthRequest.SerializeToString,
          response_deserializer=ByteReplay.FromString,
          )
      self.checkWxBot = channel.unary_unary(
          '/wxAuth/checkWxBot',
          request_serializer=AuthRequest.SerializeToString,
          response_deserializer=AuthReply.FromString,
          )
      self.CallAutoEditor = channel.unary_unary(
          '/wxAuth/CallAutoEditor',
          request_serializer=AuthRequest.SerializeToString,
          response_deserializer=AuthReply.FromString,
          )
      self.runAEScript = channel.unary_unary(
          '/wxAuth/runAEScript',
          request_serializer=AuthRequest.SerializeToString,
          response_deserializer=AuthReply.FromString,
          )


  class wxAuthServicer(object):
    """The wxAuth service definition.
    """

    def checkClientVersion(self, request, context):
      """wxAuth
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def checkClient2Version(self, request, context):
      """wxAuth
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def checkServerVersion(self, request, context):
      """wxAuth
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def wxRPCAuth(self, request, context):
      """wxAuth
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getWxBotKey(self, request, context):
      """get wxBot info
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def checkWxBot(self, request, context):
      """wxBot check
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CallAutoEditor(self, request, context):
      """AutoEditor
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def runAEScript(self, request, context):
      """runAEScript
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_wxAuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'checkClientVersion': grpc.unary_unary_rpc_method_handler(
            servicer.checkClientVersion,
            request_deserializer=AuthRequest.FromString,
            response_serializer=AuthReply.SerializeToString,
        ),
        'checkClient2Version': grpc.unary_unary_rpc_method_handler(
            servicer.checkClient2Version,
            request_deserializer=AuthRequest.FromString,
            response_serializer=AuthReply.SerializeToString,
        ),
        'checkServerVersion': grpc.unary_unary_rpc_method_handler(
            servicer.checkServerVersion,
            request_deserializer=AuthRequest.FromString,
            response_serializer=AuthReply.SerializeToString,
        ),
        'wxRPCAuth': grpc.unary_unary_rpc_method_handler(
            servicer.wxRPCAuth,
            request_deserializer=AuthRequest.FromString,
            response_serializer=AuthReply.SerializeToString,
        ),
        'getWxBotKey': grpc.unary_unary_rpc_method_handler(
            servicer.getWxBotKey,
            request_deserializer=AuthRequest.FromString,
            response_serializer=ByteReplay.SerializeToString,
        ),
        'checkWxBot': grpc.unary_unary_rpc_method_handler(
            servicer.checkWxBot,
            request_deserializer=AuthRequest.FromString,
            response_serializer=AuthReply.SerializeToString,
        ),
        'CallAutoEditor': grpc.unary_unary_rpc_method_handler(
            servicer.CallAutoEditor,
            request_deserializer=AuthRequest.FromString,
            response_serializer=AuthReply.SerializeToString,
        ),
        'runAEScript': grpc.unary_unary_rpc_method_handler(
            servicer.runAEScript,
            request_deserializer=AuthRequest.FromString,
            response_serializer=AuthReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'wxAuth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetawxAuthServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The wxAuth service definition.
    """
    def checkClientVersion(self, request, context):
      """wxAuth
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def checkClient2Version(self, request, context):
      """wxAuth
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def checkServerVersion(self, request, context):
      """wxAuth
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def wxRPCAuth(self, request, context):
      """wxAuth
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getWxBotKey(self, request, context):
      """get wxBot info
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def checkWxBot(self, request, context):
      """wxBot check
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CallAutoEditor(self, request, context):
      """AutoEditor
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def runAEScript(self, request, context):
      """runAEScript
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetawxAuthStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The wxAuth service definition.
    """
    def checkClientVersion(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """wxAuth
      """
      raise NotImplementedError()
    checkClientVersion.future = None
    def checkClient2Version(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """wxAuth
      """
      raise NotImplementedError()
    checkClient2Version.future = None
    def checkServerVersion(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """wxAuth
      """
      raise NotImplementedError()
    checkServerVersion.future = None
    def wxRPCAuth(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """wxAuth
      """
      raise NotImplementedError()
    wxRPCAuth.future = None
    def getWxBotKey(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """get wxBot info
      """
      raise NotImplementedError()
    getWxBotKey.future = None
    def checkWxBot(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """wxBot check
      """
      raise NotImplementedError()
    checkWxBot.future = None
    def CallAutoEditor(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """AutoEditor
      """
      raise NotImplementedError()
    CallAutoEditor.future = None
    def runAEScript(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """runAEScript
      """
      raise NotImplementedError()
    runAEScript.future = None


  def beta_create_wxAuth_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('wxAuth', 'CallAutoEditor'): AuthRequest.FromString,
      ('wxAuth', 'checkClient2Version'): AuthRequest.FromString,
      ('wxAuth', 'checkClientVersion'): AuthRequest.FromString,
      ('wxAuth', 'checkServerVersion'): AuthRequest.FromString,
      ('wxAuth', 'checkWxBot'): AuthRequest.FromString,
      ('wxAuth', 'getWxBotKey'): AuthRequest.FromString,
      ('wxAuth', 'runAEScript'): AuthRequest.FromString,
      ('wxAuth', 'wxRPCAuth'): AuthRequest.FromString,
    }
    response_serializers = {
      ('wxAuth', 'CallAutoEditor'): AuthReply.SerializeToString,
      ('wxAuth', 'checkClient2Version'): AuthReply.SerializeToString,
      ('wxAuth', 'checkClientVersion'): AuthReply.SerializeToString,
      ('wxAuth', 'checkServerVersion'): AuthReply.SerializeToString,
      ('wxAuth', 'checkWxBot'): AuthReply.SerializeToString,
      ('wxAuth', 'getWxBotKey'): ByteReplay.SerializeToString,
      ('wxAuth', 'runAEScript'): AuthReply.SerializeToString,
      ('wxAuth', 'wxRPCAuth'): AuthReply.SerializeToString,
    }
    method_implementations = {
      ('wxAuth', 'CallAutoEditor'): face_utilities.unary_unary_inline(servicer.CallAutoEditor),
      ('wxAuth', 'checkClient2Version'): face_utilities.unary_unary_inline(servicer.checkClient2Version),
      ('wxAuth', 'checkClientVersion'): face_utilities.unary_unary_inline(servicer.checkClientVersion),
      ('wxAuth', 'checkServerVersion'): face_utilities.unary_unary_inline(servicer.checkServerVersion),
      ('wxAuth', 'checkWxBot'): face_utilities.unary_unary_inline(servicer.checkWxBot),
      ('wxAuth', 'getWxBotKey'): face_utilities.unary_unary_inline(servicer.getWxBotKey),
      ('wxAuth', 'runAEScript'): face_utilities.unary_unary_inline(servicer.runAEScript),
      ('wxAuth', 'wxRPCAuth'): face_utilities.unary_unary_inline(servicer.wxRPCAuth),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_wxAuth_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('wxAuth', 'CallAutoEditor'): AuthRequest.SerializeToString,
      ('wxAuth', 'checkClient2Version'): AuthRequest.SerializeToString,
      ('wxAuth', 'checkClientVersion'): AuthRequest.SerializeToString,
      ('wxAuth', 'checkServerVersion'): AuthRequest.SerializeToString,
      ('wxAuth', 'checkWxBot'): AuthRequest.SerializeToString,
      ('wxAuth', 'getWxBotKey'): AuthRequest.SerializeToString,
      ('wxAuth', 'runAEScript'): AuthRequest.SerializeToString,
      ('wxAuth', 'wxRPCAuth'): AuthRequest.SerializeToString,
    }
    response_deserializers = {
      ('wxAuth', 'CallAutoEditor'): AuthReply.FromString,
      ('wxAuth', 'checkClient2Version'): AuthReply.FromString,
      ('wxAuth', 'checkClientVersion'): AuthReply.FromString,
      ('wxAuth', 'checkServerVersion'): AuthReply.FromString,
      ('wxAuth', 'checkWxBot'): AuthReply.FromString,
      ('wxAuth', 'getWxBotKey'): ByteReplay.FromString,
      ('wxAuth', 'runAEScript'): AuthReply.FromString,
      ('wxAuth', 'wxRPCAuth'): AuthReply.FromString,
    }
    cardinalities = {
      'CallAutoEditor': cardinality.Cardinality.UNARY_UNARY,
      'checkClient2Version': cardinality.Cardinality.UNARY_UNARY,
      'checkClientVersion': cardinality.Cardinality.UNARY_UNARY,
      'checkServerVersion': cardinality.Cardinality.UNARY_UNARY,
      'checkWxBot': cardinality.Cardinality.UNARY_UNARY,
      'getWxBotKey': cardinality.Cardinality.UNARY_UNARY,
      'runAEScript': cardinality.Cardinality.UNARY_UNARY,
      'wxRPCAuth': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'wxAuth', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
